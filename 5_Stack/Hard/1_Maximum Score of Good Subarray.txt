/*
Name: Maximum Score of a Good Subarray
Statement:
You are given an array of integers nums (0-indexed) and an integer k.
The score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). A good subarray is a
subarray where i <= k <= j.
Return the maximum possible score of a good subarray.

Example 1:
Input: nums = [1,4,3,7,4,5], k = 3
Output: 15
Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15.

Example 2:
Input: nums = [5,5,4,5,4,1,1,1], k = 0
Output: 20
Explanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-
0+1) = 4 * 5 = 20.

Method 1: Stack
    1. Here, we can use solution of the largest rectangle by considering current element as minimum element.
    2. We just need to make small changes in formula as below,
        l = i - leftArray[i];
        r = i +  rightArray[i];
        ans = nums[n - i - 1] * (r - l + 1);
*/
// Solution:
class Solution {
public:
    void buildTable(vector<int>& array, int answer[], int n)
    {
        stack<int> stackContainer;

        for(int i = 0; i < n; i++)
        {
            while(!stackContainer.empty() && array[stackContainer.top()] >= array[i])
                stackContainer.pop();

            answer[i] = stackContainer.empty() ? i : i - stackContainer.top() - 1;
            stackContainer.push(i);
        }
    }
    int maximumScore(vector<int>& nums, int k)
    {
        int n = nums.size(), answer;
        int leftArray[n], rightArray[n];

        buildTable(nums, leftArray, n);
        reverse(nums.begin(), nums.end());
        buildTable(nums, rightArray, n);
        reverse(rightArray, rightArray + n);

        for(int i = 0; i < n; i++)
        {
            int l = i - leftArray[i];
            int r = i +  rightArray[i];
            if(l <= k && k <= r)
                answer = max(answer, nums[n - i - 1] * (r - l + 1));
        }

        return answer;
    }
};

