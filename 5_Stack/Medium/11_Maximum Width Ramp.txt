/*
Name: Maximum Width Ramp
Statement:
A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is
j - i.
Given an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.

Example 1:
Input: nums = [6,0,8,2,1,5]
Output: 4
Explanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.

Example 2:
Input: nums = [9,8,1,0,1,9,4,0,4,1]
Output: 7
Explanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1
and nums[9] = 1.

1. Method: Stack
    1. We need to find minimum element from left and maximum element from right, so that we can get maximum difference.
    2. We can hold minimum element from left, but if greater element encountered that second minimum or third minimum
       then we won't be able to find maximum difference.
    3. So to store all minimum element from left, we can use stack;Now will first process the entire array and will push
       index of minimum elements from left.
    4. Here we cannot find difference by popping minimum element because consider: 6 3 0 5 4 2.
        i. Here, we will pop 0 and 3 element if 5 encountered but that is not the correct answer as 4 will form a
           maximum difference.
    4. So to avoid such condition, 4 should read first than 5. So we can traverse array in reverse order for second
       scan, and we can get maximum difference.

*/
// Solution:
class Solution {
public:
    int maxWidthRamp(vector<int>& nums)
    {
        stack<int> stackHolder;
        int answer = INT_MIN;

        for(int i = 0; i < nums.size(); i++)
        {
            if(stackHolder.empty() || nums[i] < nums[stackHolder.top()])
                stackHolder.push(i);
        }
        for(int i = nums.size() - 1; i >= 0 ; i--)
        {
            while(!stackHolder.empty() && nums[i] >= nums[stackHolder.top()])
            {
                answer = max(answer, i - stackHolder.top());
                stackHolder.pop();
            }
        }

        return answer;
    }
};
