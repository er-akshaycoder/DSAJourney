/*
Name: Check If Word Is Valid After Substitutions
Statement:
Given a string s, determine if it is valid.
A string s is valid if, starting with an empty string t = "", you can transform t into s after performing the following
operation any number of times:
Insert string "abc" into any position in t. More formally, t becomes tleft + "abc" + tright, where t == tleft + tright.
Note that tleft and tright may be empty.
Return true if s is a valid string, otherwise, return false.

Example 1:
Input: s = "aabcbc"
Output: true
Explanation:
"" -> "abc" -> "aabcbc" Thus, "aabcbc" is valid.

Example 2:
Input: s = "abcabcababcc"
Output: true
Explanation:
"" -> "abc" -> "abcabc" -> "abcabcabc" -> "abcabcababcc" Thus, "abcabcababcc" is valid.

Example 3:
Input: s = "abccba"
Output: false
Explanation: It is impossible to get "abccba" using the operation.

1. Method 1: Stack
    1. Whenever abc occurs in given string, just remove abc and check for remaining string
    2. Do the same until you can't find abc in string, or it gets empty.
    3. We can use stack to remove abc.
    4. When c encountered, just if stack has length GT 2 and stack has b on top and then a else return false.
*/
// Solution:

class Solution {
public:
    bool isValid(string s)
    {
        stack<char> stackHolder;

        for(const char ch: s)
        {
            if(ch == 'c')
            {
                if(stackHolder.size() < 2)
                    return false;
                if(stackHolder.top() != 'b')
                    return false;
                stackHolder.pop();
                if(stackHolder.top() != 'a')
                    return false;
                stackHolder.pop();
            }
            else
                stackHolder.push(ch);
        }

        return stackHolder.empty();
    }
};
