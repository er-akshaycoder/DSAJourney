/*
Name: Simplify Path
Statement:
Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file
system, convert it to the simplified canonical path.
In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory
up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any
other format of periods such as '...' are treated as file/directory names.
The canonical path should have the following format:
    The path starts with a single slash '/'.
    Any two directories are separated by a single slash '/'.
    The path does not end with a trailing '/'.
    The path only contains the directories on the path from the root directory to the target file or directory (i.e.,
    no period '.' or double period '..')

Return the simplified canonical path.
Example 1:
Input: path = "/home/"
Output: "/home"

Example 2:
Input: path = "/../"
Output: "/"

Example 3:
Input: path = "/home//foo/"
Output: "/home/foo"

1. Method 1: Splitting and Stack
    1. Split String by '/'
    2. If entry '/.' comes, just ignore it
    3. If entry '/..' comes, just pop an entry from stack to reach to parent.
    4. Else, push current entry into stack
    5. Iterate stack and create a string for its contents.

*/
// Solution:
class Solution {
public:
    string simplifyPath(string path)
    {
        string answer;
        stack<string> stackContainer;
        vector<string> words;

        string word;
        for(int i = 0; i < path.size(); i++)
        {
            if(path[i] == '/' && word != "" && word != "/")
            {
                words.push_back(word);
                word = "/";
            }
            else
            {
                if(!(path[i] == '/' && word.back() == '/'))
                    word += path[i];
            }
        }
        if(path[path.size() - 1] == '/')
            words.push_back("/");
        else
            words.push_back(word);

        for(int i = 0; i < words.size(); i++)
        {
            if((words[i] == "/.") )
                continue;

            if(words[i] == "/..")
            {
                if(!stackContainer.empty())
                    stackContainer.pop();
            }
            else
                stackContainer.push(words[i]);
        }
        words.clear();
        while(!stackContainer.empty())
        {
            words.push_back(stackContainer.top());
            stackContainer.pop();
        }
        reverse(words.begin(), words.end());
        for(int i = 0; i < words.size(); i++)
            answer += words[i];

        if(answer.size() && answer[answer.size() - 1] == '/')
            answer.pop_back();

        return answer == "" ? "/" : answer;
    }
};

