/*
Name: Asteroid Collision
Statement:
We are given an array asteroids of integers representing asteroids in a row. For each asteroid, the absolute value
represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each
asteroid moves at the same speed.
Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both
are the same size, both will explode. Two asteroids moving in the same direction will never meet.

Example 1:
Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.

Example 2:
Input: asteroids = [8,-8]
Output: []
Explanation: The 8 and -8 collide exploding each other.

Example 3:
Input: asteroids = [10,2,-5]
Output: [10]
Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide
resulting in 10.

1. Method: Stack.
    1. If Current element is negative(leftwards) and stack has positive entry, then dp below two steps:
    2. If both are equal, just pop an entry from stack and don't look for another collision.
    3. If Current is greater, just pop an entry and look for another collision with stack'top, else don't push a
       current element in stack.
*/
// Solution:
class Solution {
public:
    vector<int> asteroidCollision(vector<int>& asteroids)
    {
        stack<int> stackHolder;

        for(int i = 0; i < asteroids.size(); i++)
        {
            bool flag = false;
            int curr = asteroids[i];
            while(curr < 0 && !stackHolder.empty() && stackHolder.top() > 0)
            {
                if(abs(curr) == stackHolder.top())
                {
                    stackHolder.pop();
                    flag = true;
                    break;
                }
                else
                {
                    if(abs(curr) < stackHolder.top())
                    {
                        curr = stackHolder.top();
                        flag = true;
                    }
                    else
                        stackHolder.pop();
                }
            }
            if(!flag)
                stackHolder.push(asteroids[i]);
        }
        int n = stackHolder.size() - 1;
        vector<int> answer(n + 1, 0);

        while(!stackHolder.empty())
        {
            answer[n] = stackHolder.top();
            n -= 1;
            stackHolder.pop();
        }

        return answer;
    }
};
