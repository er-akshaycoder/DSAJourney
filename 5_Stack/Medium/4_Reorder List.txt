/*
Name: Reorder List
Statement:
You are given the head of a singly linked-list. The list can be represented as:
L0 → L1 → … → Ln - 1 → Ln

Reorder the list to be on the following form:
L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

Example 1:
Input: head = [1,2,3,4]
Output: [1,4,2,3]

Example 2:
Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]

Method: Stack
    1. Insert second part of list into a stack.
    2. Manipulate the list.
*/
// Solution:
class Solution {
public:
    void reorderList(ListNode* head)
    {
        stack<ListNode*> stackContainer;
        ListNode *temp, *fast, *slow, *holder, *entry;
        slow = fast = head;

        while(fast && fast -> next)
        {
            holder = slow;
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        holder -> next = NULL;
        while(slow)
        {
            stackContainer.push(slow);
            slow = slow -> next;
        }
        temp = head;
        while(temp && !stackContainer.empty())
        {
            holder = temp -> next;
            entry = stackContainer.top();
            stackContainer.pop();

            temp -> next = entry;
            entry -> next = holder;
            temp = holder;
        }
        if(!stackContainer.empty())
        {
            entry -> next = stackContainer.top();
            stackContainer.pop();
            entry = entry -> next;
        }
        entry -> next = NULL;
    }
};

