/*
Name: Remove All Adjacent Duplicates In String
Statement:
You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent
and equal letters and removing them. We repeatedly make duplicate removals on s until we no longer can.Return the final
string after all such duplicate removals have been made. It can be proven that the answer is unique.

Example 1:
Input: s = "abbaca"
Output: "ca"

Example 2:
Input: s = "azxxzy"
Output: "ay"

1. Method 1: Stack
1. Push a current character if stack is empty or stack's top is not matching else pop.
2. Create a string from resultant stack and reverse it.

*/
// Solution:
class Solution {
public:
    string removeDuplicates(string s)
    {
        stack<char> stackContainer;
        string answer;

        for(int i = 0; i < s.size(); i++)
        {
            if(!stackContainer.empty() && stackContainer.top() == s[i])
                stackContainer.pop();
            else
                stackContainer.push(s[i]);
        }
        while(!stackContainer.empty())
        {
            answer += stackContainer.top();
            stackContainer.pop();
        }
        reverse(answer.begin(), answer.end());

        return answer;
    }
};
