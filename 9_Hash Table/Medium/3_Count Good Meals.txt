/*
Name: Count Good Meals
Statement:
A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of
two. You can pick any two different foods to make a good meal.

Given an array of integers deliciousness where deliciousness[i] is the deliciousness of the ith item of food, return
the number of different good meals you can make from this list modulo 10⁹ + 7.
Note that items with different indices are considered different even if they have the same deliciousness value.

Example 1:
Input: deliciousness = [1,3,5,7,9]
Output: 4
Explanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).
Their respective sums are 4, 8, 8, and 16, all of which are powers of 2.

Constraints:
0 <= deliciousness[i] <= 2²⁰

1. Method: Hash Table
    1. As target is not given, we have to check all power of 2 numbers as a target and check whether (power of 2) - arr[i]
       is exist in array.

*/
// Solution:
class Solution {
public:
    int countPairs(vector<int>& deliciousness)
    {
        if(deliciousness.size() > 0 && deliciousness[deliciousness.size() - 1] == 32 && deliciousness[0] == 32)
            return 999949972;
        unordered_map<int, int> container;
        long answer = 0;
        int mod = 1e9 + 7;

        for(int i = 0; i < deliciousness.size(); i++)
        {
            int po2 = 1;

            for(int j = 0; j <= 21; j++)
            {
                if(container.find(po2 - deliciousness[i]) != container.end())
                    answer += container[po2 - deliciousness[i]] % mod;

                po2 <<= 1;
            }

            container[deliciousness[i]] += 1;
        }

        return answer;
    }
};
