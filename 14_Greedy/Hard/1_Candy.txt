/*
Name: Candy
Statement:
There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.
You are giving candies to these children subjected to the following requirements:
    Each child must have at least one candy.
    Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

Example 1:
Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2
candies respectively.

1. Method: Auxiliary Arrays
    1. Use two arrays, left and right.
    2. Left array will store possible candies for ratings[i] children from left.
    3. Right array will store possible candies for ratings[i] children from right.
    4. Required candies for ratings[i] children will be maximum of left[i] and right[i].
*/
// Solution:
class Solution {
public:
    int candy(vector<int>& rating)
    {
        int answer = 0, n = rating.size();
        vector<int> left(n, 1);
        vector<int> right(n, 1);

        for(int i = 1; i < n; i++)
        {
            if(rating[i] > rating[i - 1])
                left[i] = left[i - 1] + 1;

            if(rating[n - (i + 1)] > rating[n - i])
                right[n - (i + 1)] = right[n - i] + 1;
        }
        for(int i = 0; i < n; i++)
            answer += max(left[i], right[i]);

        return answer;
    }
};