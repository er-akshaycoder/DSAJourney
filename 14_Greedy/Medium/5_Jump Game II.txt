/*
Name: Jump Game II
Statement:
Given an array of non-negative integers nums, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Your goal is to reach the last index in the minimum number of jumps.
You can assume that you can always reach the last index.

Example 1:
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to
the last index.

1. Method: DP
    1. Lets say you are at ith index and just check if you can reach to it from all previous index in a single step.
    2. if j + nums[j] >= i then jump[i] = min(jump[j] + 1)

2. Method: Greedy
    1. Take 2 variables, say current and furthest
    2. furthest variable will point to maximum reachable index and current will point to next fix index from current
       index.
    3. If current and current index are same, just increment jump count and point current to the furthest variable.

*/
// Solution
class Solution {
public:
    int jump(vector<int>& nums)
    {
        int jump=0,farthest=0,current=0;

        for(int i=0;i<nums.size()-1;i++)
        {
            farthest=max(farthest,nums[i]+i);
            if(i==current)
            {
                cout<<i<<" ";
                current=farthest;
                jump++;
            }
        }
        return jump;
    }
};