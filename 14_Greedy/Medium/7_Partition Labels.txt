/*
Name: Partition Labels
Statement:
You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in
at most one part.
Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.
Return a list of integers representing the size of these parts.

Example 1:
Input: s = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts.

1. Method: Hash Table and Two pointers
    1. Use Hash Table to store last occurrence of characters.
    2. Scan string and maintain left and right pointer. Left pointer is nothing but current index
    3. If HT[char] is not a current index, means one more occurrence is there, so point right to that occurrence.
    4. If HT[char] is current index and right is less than left, means no further character of current group, add size
       found substring into answer set.
*/
// Solution:
class Solution {
public:
vector<int> partitionLabels(string s)
{
    vector<int> answer;
    int container[26] = {-1};

    for(int i = 0; i < s.size(); i++)
        container[s[i] - 'a'] = i;

    int j = -1, start = 0;
    for(int i = 0; i < s.size(); i++)
    {
        if(container[s[i] - 'a'] != i)
            j = max(j, container[s[i] - 'a']);
        else
        {
            if(i >= j)
            {
                answer.push_back(i - start + 1);
                start = i + 1;
            }
        }
    }

    return answer;
}
};
