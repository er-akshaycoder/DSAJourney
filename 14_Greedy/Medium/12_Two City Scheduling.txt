/*
Name: Two City Scheduling
Statement:
A company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti], the cost of
flying the iᵗʰ person to city a is aCosti, and the cost of flying the iᵗʰ person to city b is bCosti.
Return the minimum cost to fly every person to a city such that exactly n people arrive in each city.

Example 1:
Input: costs = [[10,20],[30,200],[400,50],[30,20]]
Output: 110
Explanation:
The first person goes to city A for a cost of 10.
The second person goes to city A for a cost of 30.
The third person goes to city B for a cost of 50.
The fourth person goes to city B for a cost of 20.

The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.

1. Method: Greedy
    1. Observations:
        1. We need to pick one entry from each element
        2. For A, we need to pick whichever is less at left side.
        3. For B, we need to pick whichever is less at right side.
    2. So, Sort the given vector as per difference Cost[i][0] - Cost[i][1].
    3. For A, first half will be answere and second half will be for B

*/
// Solution:
class Solution {
public:
    static bool comparator(vector<int> a, vector<int> b)
    {
        return (a[0] - a[1]) <= (b[0] - b[1]);
    }
    int twoCitySchedCost(vector<vector<int>>& costs)
    {
        int answer = 0, n = costs.size();

        sort(costs.begin(), costs.end(), comparator);

        for(int i = 0; i < n / 2; i++)
            answer += costs[i][0];

        for(int i = n / 2; i < n; i++)
            answer += costs[i][1];

        return answer;
    }
};
