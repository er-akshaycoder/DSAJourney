/*
Name: Advantage Shuffle
Statement:
You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to
nums2 is the number of indices i for which nums1[i] > nums2[i].
Return any permutation of nums1 that maximizes its advantage with respect to nums2.

Example 1:
Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]
Output: [2,11,7,15]

Example 2:
Input: nums1 = [12,24,8,32], nums2 = [13,25,32,11]
Output: [24,32,8,12]

1. Method: Greedy
    1. Sort both given arrays in ascending order.
    2. As we need to store nums1[i] at location where nums1[] > nums2[j] of answer, we need to create array of a pair of
       second {nums2[i], i} before sorting.
    3. If nums1[i] > temp[j].first then assign nums1[i] to answer[temp[j].second].
*/
// Solution:
class Solution {
public:
    vector<int> advantageCount(vector<int>& nums1, vector<int>& nums2)
    {
        int n = nums1.size(), j = 0;
        vector<int> answer(n);
        vector<pair<int, int>> temp(n);

        for(int i = 0; i < n; i++)
            temp[i] = {nums2[i], i};

        sort(nums1.begin(), nums1.end());
        sort(temp.begin(), temp.end());

        for(int i = 0; i < n; i++)
        {
            if(nums1[i] > temp[j].first)
            {
                answer[temp[j].second] = nums1[i];
                j += 1;
                nums1[i] = -1;
            }
        }
        for(int i = 0; j < n && i < n; i++)
        {
            if(nums1[i] != -1)
            {
                answer[temp[j].second] = nums1[i];
                j += 1;
            }
        }

        return answer;
    }
};
