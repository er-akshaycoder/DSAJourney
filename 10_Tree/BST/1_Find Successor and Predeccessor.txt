/*
Name: 1_Find Successor and Predeccessor
Statement:
There is BST given with root node with key part as an integer only. You need to find the in-order successor and
predecessor of a given key. If either predecessor or successor is not found, then set it to NULL.

Example:
Input:
50 30 L 30 20 L 30 40 R 50 70 R 70 60 L 70 80 R
65
Output:
60 70

In-order Structure:
    x       y       z
    Pred    node    successor

1. Method:
    1. If Key found, check its leftSubtree's rightmost node for predecessor and rightSubtree's leftmost node for
       successor.
    2. If current node is GT than key, just assign current node as successor else assign current node as predecessor.
*/
// Solution:
void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
{
    while(root)
    {
        if(root -> key == key)
        {
            if(root -> left)
            {
                pre = root -> left;
                while(pre -> right)
                    pre = pre -> right;
            }
            if(root -> right)
            {
                suc = root -> right;
                while(suc -> left)
                    suc = suc -> left;
            }
            return;
        }

        if(root -> key > key)
        {
            suc = root;
            root = root -> left;
        }
        else
        {
            pre = root;
            root = root -> right;
        }
    }
}
