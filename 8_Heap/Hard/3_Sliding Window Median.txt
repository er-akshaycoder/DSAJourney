/*
Name: Sliding Window Median
Statement:
The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value.
So the median is the mean of the two middle values.

For examples, if arr = [2,3,4], the median is 3.
For examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.

Example 1:
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]

1. Method: BBST
    1. We can use Balanced BST of size k to get median.
    2. Due to time constraint, we can use set(alternative to BBST) as our container.
    3. We will push first k elements into set and then set iterator at middle of set.
    4. Now, we will iterate remaining elements and will take median by iterator and then push next element.
    5. Set iterator based on inserted element, middle one and (i - k)th element.
    6. Remove  (i - k)th element.

*/
// Solution:
class Solution {
public:
    vector<double> medianSlidingWindow(vector<int>& nums, int k)
    {
        vector<double> answer;
        int n = nums.size(), i = 0;
        multiset<double> container;

        for(; i < k; i++)
            container.insert(nums[i]);
        auto itr = next(container.begin(), (k - 1) / 2);
        while(true)
        {
            double med = k % 2 ? *itr : (*itr + *next(itr)) / 2;
            answer.push_back(med);
            if(i == n)  break;
            container.insert(nums[i]);
            if (nums[i] < *itr)
                --itr;
            if (nums[i - k] <= *itr)
              ++itr;
           container.erase(container.lower_bound(nums[i - k]));
            i += 1;
        }

        return answer;
    }
};
