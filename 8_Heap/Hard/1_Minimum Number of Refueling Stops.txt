/*
Name: Minimum Number of Refueling Stops
Statement:
Note: Understand Problem From https://www.youtube.com/watch?v=sKjKLN5JswQ
A car travels from a starting position to a destination which is target miles east of the starting position.
There are gas stations along the way. The gas stations are represented as an array stations where stations[i] =
[positioni, fueli] indicates that the iᵗʰ gas station is positioni miles east of the starting position and has fueli
liters of gas.
The car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. It uses one liter of
gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas
from the station into the car.
Return the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach
the destination, return -1.
Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there. If the car reaches the
destination with 0 fuel left, it is still considered to have arrived.

Example:
Input: target = 130, startFuel = 10, stations = [[10,70],[15,60],[20,30],[30,30],[60,40]]
Output: 2
Explanation: We start with 10 liters of fuel.
We drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.
Then, we drive from position 10 to position 60 (expending 50 liters of fuel),and refuel from 10 liters to 50 liters of
gas.  We then drive to and reach the target.
We made 2 refueling stops along the way, so we return 2.


1. Method: Max Heap
    1. We have to push all the stations into heap till current Position become GT than stations[i][0]
    2. Now, we have to pull maximum fuel's entry from heap and update current position, so that we could reach target
       in minimal steps.
    3. Once scanning done, then pop an entry from heap one by one and update current position.

*/
// Solution:
class Solution {
public:
    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations)
    {
        priority_queue<pair<int, int>> container;
        int currentPos = startFuel, n = stations.size(), i = 0, answer = 0;

        if(currentPos >= target)
           return 0;
        while(i < n)
        {
            if(currentPos >= stations[i][0])
                container.push({stations[i][1], stations[i][0]});
            else
            {
                if(container.empty())       return -1;
                pair<int, int> entry = container.top();
                container.pop();
                currentPos += entry.first;
                answer += 1;
                if(currentPos >= target)
                    return answer;
                i -= 1;
            }

            i += 1;
        }
        if(container.empty())       return -1;
        while(!container.empty() && currentPos < target)
        {
            pair<int, int> entry = container.top();
            container.pop();
            currentPos += entry.first;
            answer += 1;
        }

        return currentPos >= target ? answer : -1;
    }
};
