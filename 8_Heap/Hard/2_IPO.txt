/*
Name: IPO
Statement:
Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode
would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only
finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital
after finishing at most k distinct projects.

You are given n projects where the iᵗʰ project has a pure profit profits[i] and a minimum capital of capital[i] is
needed to start it.
Initially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added
to your total capital.
Pick a list of at most k distinct projects from given projects to maximize your final capital, and return the final
maximized capital.
The answer is guaranteed to fit in a 32-bit signed integer.

Example 1:
Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]
Output: 4
Explanation: Since your initial capital is 0, you can only start the project
indexed 0.
After finishing it you will obtain profit 1 and your capital becomes 1.
With capital 1, you can either start the project indexed 1 or the project indexed 2.
Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.
Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.

1. Method: Heaps
    1. Here, we have two entities to take an appropriate decision, here one heap won't be sufficient.
    2. Will use min heap for capital as we have to consider minimum capital as per given w, but at same time we have to
       consider maximum profit so will be using heap for it.
    3. We will store all capital, profit pairs in minheap.
    4. Now, we will pop all entries from minheap till its capital is less than given w and will store its profit into
       maxheap.
    5. Now, we will take maximum profit from maxheap

*/
// Solution:
class Solution {
public:
    int findMaximizedCapital(int k, int w, vector<int>& profits, vector<int>& capital)
    {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> minHeap;
        priority_queue<int> maxHeap;

        for(int i = 0; i < capital.size(); i++)
            minHeap.push({capital[i], profits[i]});

        while(k-- > 0)
        {
            while(!minHeap.empty() && minHeap.top().first <= w)
            {
                maxHeap.push(minHeap.top().second);
                minHeap.pop();
            }
            if(maxHeap.empty())
                return w;
            w += maxHeap.top();
            maxHeap.pop();
        }

        return w;
    }
};

