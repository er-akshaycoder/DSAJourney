/*
Name: Ugly Number II
Statement:
An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.
Given an integer n, return the nᵗʰ ugly number.

Example 1:
Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10
ugly numbers.

1. Method: Min Heap
    1. Start from 1 and form further numbers from it by multiplying 2, 3 and 5.
    2. Take next Minimum and then form further numbers
    3. Repeat 2nd step until n
    4. Return minimum element.

2. Method: Dynamic Programming
    1. We can optimize above method by using array.
    2. In above method, we were forming the furthers numbers from 1 and were taking minimum for next turn and doing the
       same.
    3. Here we will maintain 3 numbers (with 3 index each)which will stored formed numbers from 1 for each 2, 3 and 5.
    4. Whosoever turn is done, we will increment corresponding index to make sure we are forming a number from each
       number.
*/
// Solution:
class Solution {
public:
    int nthUglyNumber(int n)
    {
        int answer[n], f2, f3, f5;
        int num1 = 2, num2 = 3, num3 = 5, i = 1;

        f2 = f3 = f5 = 0;
        answer[0] = 1;
        while(i < n)
        {
            answer[i] = min(num1, min(num2, num3));

            if(answer[i] == num1)
            {
                f2 += 1;
                num1 = answer[f2] * 2;
            }
            if(answer[i] == num2)
            {
                f3 += 1;
                num2 = answer[f3] * 3;
            }
            if(answer[i] == num3)
            {
                f5 += 1;
                num3 = answer[f5] * 5;
            }

            i += 1;
        }

        return answer[n - 1];
    }
};
