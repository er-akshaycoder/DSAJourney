/*
Name: K Closest Points to Origin
Statement:
Given an array of points where points[i] = [xi, yi] represents a point on the X- Y plane and an integer k, return the
k closest points to the origin (0, 0).
The distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)² + (y1 - y2)²).
You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

Example 1:
Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin

Note: Comparison is based on sum of squares of point
1. Method: Max Heap
    1. Push the points as per their sum of squares
*/
// Solution:
class Solution {
public:
    struct compare
    {
        bool operator()(vector<int> v1, vector<int> v2)
        {
            return v1[1] < v2[1];
        }
    };
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k)
    {
        priority_queue<vector<int>, vector<vector<int>>, compare> container;

        for(int i = 0; i < points.size(); i++)
        {
            int distance = (points[i][0] * points[i][0]) + (points[i][1] * points[i][1]);
            if(container.size() < k)
                container.push({i, distance});
            else
            {
                if(distance < container.top()[1])
                {
                    container.push({i, distance});
                    container.pop();
                }
            }
            cout<<container.top()[1]<<" ";
        }
        vector<vector<int>> answer;
        while(!container.empty())
        {
            answer.push_back(points[container.top()[0]]);
            container.pop();
        }

        return answer;
    }
};
