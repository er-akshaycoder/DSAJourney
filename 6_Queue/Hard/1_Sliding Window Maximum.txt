/*
Name: Sliding Window Maximum
Statement:
You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the
array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by
one position.
Return the max sliding window.

Example 1:
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]

1. Method: Deque
    Intuition: Store only necessary elements
    1. Use double ended queue to pop an elements from both side.
    2. If current element is GT container's back just pop back out.
    3. If Front is a first element of last window, just pop front out.
    4. Push current element's index.

*/
// Solution:
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k)
    {
        deque<int> container;
        vector<int> answer;

        int i = 0, n = nums.size();
        for(; i < k; i++)
        {
            while(!container.empty() && nums[i] >= nums[container.back()])
                container.pop_back();

            container.push_back(i);
        }
        answer.push_back(nums[container.front()]);
        for(; i < n; i++)
        {
            if(container.front() == i - k)
                container.pop_front();

            while(!container.empty() && nums[i] >= nums[container.back()])
                container.pop_back();

            container.push_back(i);
            answer.push_back(nums[container.front()]);
        }

        return answer;
    }
};
