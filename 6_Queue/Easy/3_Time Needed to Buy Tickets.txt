/*
Title: Time Needed to Buy Tickets
Statement:
There are n people in a line queuing to buy tickets, where the 0ᵗʰ person is at the front of the line and the (n - 1)ᵗʰ
person is at the back of the line.
You are given a 0-indexed integer array tickets of length n where the number of tickets that the iᵗʰ person would like
to buy is tickets[i].
Each person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the
end of the line (which happens instantaneously) in order to buy more tickets. If a person does not have any tickets
left to buy, the person will leave the line.

Return the time taken for the person at position k (0-indexed) to finish buying tickets.

Example:
Input: tickets = [2,3,2], k = 2
Output: 6

Example:
Input: tickets = [5,1,1,1], k = 0
Output: 8

1. Method: Queue
    1. Reduce tickets[i] by 1 every time and iterate loop until tickets[k] becomes 0.
    2. To decrement tickets[i] one after one, we will use queue.
*/
// Solution:
class Solution {
public:
    int timeRequiredToBuy(vector<int>& tickets, int k)
    {
        queue<int> queHolder;
        int answer = 0;

        for(int i = 0; i < tickets.size(); i++)
            queHolder.push(i);

        while(!queHolder.empty() && tickets[k] != 0)
        {
            int index = queHolder.front();
            queHolder.pop();
            tickets[index] -= 1;

            if(tickets[index] > 0)
                queHolder.push(index);

            answer += 1;
        }

        return answer;
    }
};
