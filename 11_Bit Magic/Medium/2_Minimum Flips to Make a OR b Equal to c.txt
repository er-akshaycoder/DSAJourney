/*
Name: Minimum Flips to Make a OR b Equal to c
Statement:
Given 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make ( a OR b == c ).
(bitwise OR operation). Flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their
binary representation.

Example 1:
Input: a = 2, b = 6, c = 5
Output: 3
Explanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)

1. Method Bit Magic
    1. Take ORing of given a and b, say result.
    2. Iterate loop for 0 - 32 and check if each bit of both result and c is same.
    3. If not same, just increment count by 1 or 2 based on mismatch.

*/
// Solution
class Solution {
public:
    int minFlips(int a, int b, int c)
    {
        int answer = 0, OR;

        OR = a | b;

        for(int i = 0; i < 32; i++)
        {
            if((OR & (1 << i)) == (c & (1 << i)))
				continue;

			if((a & (1 << i)) && (b & (1 << i)))
				answer += 2;
			else
				answer += 1;
        }

        return answer;
    }
};
