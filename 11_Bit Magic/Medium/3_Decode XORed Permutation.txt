/*
Name Decode: XORed Permutation
Statement:
There is an integer array perm that is a permutation of the first n positive integers, where n is always odd.
It was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] XOR perm[i + 1]. For
example, if perm = [1,3,2], then encoded = [2,1].

Given the encoded array, return the original array perm. It is guaranteed that the answer exists and is unique.

Example 1:
Input: encoded = [6,5,4,6]
Output: [2,4,1,5,3]

1. Method: Bit Magic
    1. Take XOR of all numbers from 1 to n;
    2. To find first number, take XOR of alternative elements of given array starting from second element.
    3. Example:     [6   5   4   6]
                    / \ / \ / \ / \
                    2 4 4 1 1 5 5 3

    4. From first, find remaining elements.
*/
// Solution
class Solution {
public:
    vector<int> decode(vector<int>& encoded)
	{
		int xOR = 0;
		int n = encoded.size() + 1;
		vector<int> answer;

		for(int i = 1; i <= n; i++)
			xOR ^= i;

		for(int i = 1; i < n - 1; i += 2)
			xOR ^= encoded[i];

		answer.push_back(xOR);

		for(int i = 0; i < n - 1; i++)
			answer.push_back(encoded[i] ^ answer.back());

		return answer;
	}
};
