/*
Name: Subsets
Statement:
Given an integer array nums of unique elements, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

1. Method: Backtracking
    1. For each element, find the possible subsets with remaining elements.
    2. For above example, find all the combinations of 1 and remaining elements. {1}, {1, 2}, {1, 3} {1, 2, 3}.
    3. Pick one number at a time and forms such subsets and then go for second element and so on
    // Solution:
    void findSubsets(vector<int> nums, vector<int> &container, vector<vector<int>> &answer, int index)
    {
    	answer.push_back(container);

    	for(int i = index; i < nums.size(); i++)
    	{
    		container.push_back(nums[i]);
    		findSubsets(nums, container, answer, i + 1);
    		container.pop_back();
    	}
    }

2. Method 2: Bit Magic
    1. Finding all subsets is as same as finding all combinations of 0 and 1 for n bit
    2. For Example, nums = {1, 2, 3}
        0   0 0 0   --> {}
        1   0 0 1   --> {1}
        2   0 1 0   --> {1, 2}
        3   0 1 1   --> {2}
        4   1 0 0
        5   1 0 1
        6   1 1 0
        7   1 1 1   --> {1, 2, 3}
    3. Whichever positioned bit is set, just add the corresponding element into answer set.

*/
// Solution:
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums)
    {
        vector<vector<int>> answer;
        int n = nums.size();
        int m = 1 << n;

        for(int i = 0; i < m; i++)
        {
            vector<int> container;

            for(int j = 0; j < n; j++)
            {
                if(i & (1 << j))
                    container.push_back(nums[j]);
            }
            answer.push_back(container);
        }

        return answer;
    }
};
