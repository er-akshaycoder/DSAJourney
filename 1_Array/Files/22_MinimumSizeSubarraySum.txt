/*
Name: Minimum Size Sub-array Sum.
Problem Statement:
Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous
subarray of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.

Example 1:
Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3]

Method 1: Sliding Window
1. Scan the array and find the sum til nums[i].
2. If current sum is greater than target, try to minimize the current window.
3. If sum is still GE target even we removed first element from window, then subtract it and increment start.
4. Take the minimum length of such windows.
*/

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums)
    {
        int n = nums.size(), sum = 0, start = 0, minLength = nums.size();

        for(int i = 0; i < n; i++)
        {
            sum += nums[i];
            while((sum - nums[start]) >= target)
            {
                sum -= nums[start];
                start += 1;
            }
            if(sum >= target)
            {
                minLength = min(minLength, (i - start) + 1);
            }
        }

        if(sum < target)
            return 0;
        return minLength;
    }
};