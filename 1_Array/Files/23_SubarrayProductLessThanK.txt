/*
Name: Subarray Product Less Than K
Problem Statement:
Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the
elements in the subarray is strictly less than k.

Example 1:
Input: nums = [10,5,2,6], k = 100
Output: 8
Explanation: The 8 subarrays that have product less than 100 are:
[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]
Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.

Method 1: Sliding Window:
1. First forms the window of sub-array of product less than k
2. If window's product is exceeding the k, then increment the start accordingly.
3. If nums[i] > k then point the start to i + 1 and product = 1 as no subwindow will form with nums[i].
*/

class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k)
    {
        int n = nums.size(), start = 0, total = 0, sum = 1;

        for(int i = 0; i < n; i++)
        {
            if(nums[i] >= k)
            {
                start = i + 1;
                sum = 1;
                continue;
            }
            sum *= nums[i];
            while(sum >= k)
            {
                sum /= nums[start];
                start += 1;
            }
            total += (i - start) + 1;
        }

        return total;
    }
};
