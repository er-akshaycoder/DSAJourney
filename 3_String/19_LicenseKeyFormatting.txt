/*
Name: License Key Formatting
Statement:
You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The
string is separated into n + 1 groups by n dashes. You are also given an integer k.
We want to reformat the string s such that each group contains exactly k characters, except for the first group, which
could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted
between two groups, and you should convert all lowercase letters to uppercase.
Return the reformatted license key.

Example 1:
Input: s = "5F3Z-2e-9-w", k = 4
Output: "5F3Z-2E9W"

Method: Straight forward

Implementation:
class Solution {
public:
    string licenseKeyFormatting(string s, int k)
    {
        string word = "";
        string answer = "";
        for(int i = s.size() - 1; i >= 0; i--)
        {
            if(s[i] == '-')
                continue;
            if('a' <= s[i] && s[i] <= 'z')
                word += s[i] - 32;
            else
                word += s[i];
            if(word.size() == k)
            {
                word += '-';
                answer += word;
                word = "";
            }
        }
        answer += word;
        if(answer.size() != 0 && answer[answer.size() - 1] == '-')
            answer.pop_back();
        reverse(answer.begin(), answer.end());

        return answer;
    }
};
*/