/*
Name: Decoded String at Index
Statement:
You are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time
and the following steps are taken:
     If the character read is a letter, that letter is written onto the tape.
     If the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total.
Given an integer k, return the kᵗʰ letter (1-indexed) in the decoded string.

Example 1:
Input: s = "abc2defg2", k = 12
Output: "b"
Explanation: The decoded string is "abcabcdefgabcabcdefg".
The 12ᵗʰ letter in the string is "b".

1. Method 1: Brute-Force
1. Take auxiliary reference string which will give decoded string.
2. Traverse the given string and append char for non-digit character
3. If digit found, just concat string itself for digit times.

Time: T = O(N * N * max(digit))

2. Method 2: Using + operator
1. For above solution, we can reduce second O(N) factor which was for concatenation by using + operator.

Time: T = O(N * max(digit))

3. Method 3: Efficient
1. Find the total length of decoded string, say n
2. Traverse the string in backward direction, and if digit found , divide n by digit and take the mod.
3. Example, if s = abc2defg2 and k = 12 (Target output is b)
    1. Decoded length is 20 and k % n is 12
    2. Traverse string in backward
    3. digit found, so divide 20 by 2 and result is 10 and k % n is 2
    4. Here actually we were looking for second character 'b' as actual string length is 10 + 2
    5. Next entry is g, so n = n - 1 and k % n is 2 (n = 9, k = 2)
    6. Next entry is f, so n = n - 1 and k % n is 2 (n = 8, k = 2)
    6. Next entry is e, so n = n - 1 and k % n is 2 (n = 7, k = 2)
    6. Next entry is d, so n = n - 1 and k % n is 2 (n = 6, k = 2)
    6. Next entry is 2, so n = n / 2 and k % n is 2 (n = 3, k = 2)
    7. Next entry is c, so n = n - 1 and k % n is 2 (n = 2, k = 2)
    8. Next char is b and k % n is 0, and hence b is output
Time: T = O(N )

Implementation:
class Solution {
public:
    string decodeAtIndex(string S, int K)
    {
        int N = S.size();
        long size = 0;

        // finding size = length of new string S'
        for (int i = 0; i < N; ++i)
        {
            if (isdigit(S[i]))
                size = size * (S[i] - '0');
            else
                size += 1;
        }

        // get the K-th letter
        for (int i = N - 1; i >= 0; --i)
        {
            K %= size;

            if (K == 0 && isalpha(S[i]))
                return (string) "" + S[i];

            if (isdigit(S[i]))
                size = size / (S[i] - '0');
            else
                size -= 1;
        }
        return "";
    }
};
*/