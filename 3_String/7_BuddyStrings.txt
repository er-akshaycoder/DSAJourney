/*
Name: Buddy Strings
Statement:
    Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal,
    otherwise, return false. Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and
    swapping the characters at s[i] and s[j].
    For example, swapping at indices 0 and 2 in "abcd" results in "cbad".
    Example 1:
    Input: s = "ab", goal = "ba"
    Output: true
    Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal
    to goal.

    Example 2:
    Input: s = "ab", goal = "ab"
    Output: false
    Explanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which
    results in "ba" != goal.

    Example 3:
    Input: s = "aa", goal = "aa"
    Output: true
    Explanation: You can swap s[0] = 'a' and s[1] = 'a' to get "aa", which is equal
    to goal.

Method 1: Brute force
    1. Scan give string with two loops
    2. Swap the characters at i and j index and check result becomes equal to goal

Method 1: Hash Table
    1. Check if there are only two mismatch between s and goal, and those should be equivalent to each other.
    2. If both string are equal, just check if any character of s is repeated more than 1
    3. Else return false.

Implementation:
class Solution {
public:
    bool buddyStrings(string s, string goal)
    {
        if(s.size() != goal.size())
            return false;

        int hashTable[256] = {0};
        int first = -1, second = -1, flag = 0;
        for(int i = 0; i < s.size(); i++)
        {
            if(s[i] != goal[i])
            {
                if(first == -1 || second == -1)
                {
                    if(first == -1)
                        first = i;
                    else
                        second = i;
                }
                else
                    return false;

            }
            hashTable[s[i]] += 1;
            if(hashTable[s[i]] >= 2)
                flag = 1;
        }
        if(s == goal)
        {
            if(!flag)
                return false;
        }
        else
        {
           if(first == -1 || second == -1)
                return false;
           if(s[first] != goal[second] || s[second] != goal[first])
               return false;
        }
        return true;
    }
};
*/