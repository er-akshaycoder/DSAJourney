/*
Name: Minimum Time Difference
Statement:
Given a list of 24-hour clock time points in "HH:MM" format, return the minimum minutes difference between any two
time-points in the list.
Example 1:
Input: timePoints = ["23:59","00:00"]
Output: 1
Example 2:
Input: timePoints = ["00:00","23:59","00:00"]
Output: 0

Method 1: Brute Force
    1. Iterate String array and take difference strings[i] and other strings.
    2. Return the minimum difference.

Method 2: Sorting
    1. Create vector of size n to store each string in integer format.
    2. As we need to compare two time points in minutes, we will convert each string into integer minutes, and then we
       will push it into the vector.
    3. Sort the vectors and iterate vector
    4. As clock is circular, we have to consider two special cases while taking the difference of vect[i-1] and vect[i]:
        1. Diff = vect[i] - vect[i - 1]; (Direct difference)
        2. Diff = 24 * 60 - vect[i] - vect[i - 1]; (circular difference)
    5. Here, we need to return minimum of above two cases
    6. Also, we need to consider difference of vect[i] with vect[0] as may get lower time points closer.

Implementation:
class Solution {
public:

    int findMinDifference(vector<string>& timePoints)
    {
        int n = timePoints.size();
        int answer = 24 * 60;
        int MAX_MIN = 24 * 60;
        vector<int> times;

        for(int i = 0; i < n; i++)
            times.push_back(stoi(timePoints[i].substr(0, 2)) * 60 + stoi(timePoints[i].substr(3)));

        sort(times.begin(), times.end());
        for(int i = 1; i < n; i++)
        {
            int diff1 = times[i] - times[i - 1];
            int diff2 = MAX_MIN - times[i] + times[0];
            int diff = min(diff1, diff2);
            int minMinutes = min(MAX_MIN - diff, diff);

            answer = min(minMinutes, answer);
        }
        return answer;
    }
};

//runtime:14 ms
//memory:13.8 MB


*/