/*
Name: Validate IP Address
Statement:
Given a string queryIP, return "IPv4" if IP is a valid IPv4 address, "IPv6" if IP is a valid IPv6 address or "Neither"
if IP is not a correct IP of any type. A valid IPv4 address is an IP in the form "x1.x2.x3.x4" where 0 <= xi <= 255
and xi cannot contain leading zeros. For example, "192.168.1.1" and "192.168.1.0" are valid IPv4 addresses but
"192.168.01.1", while "192.168.1.00" and "192.168@1.1" are invalid IPv4 addresses.
A valid IPv6 address is an IP in the form "x1:x2:x3:x4:x5:x6:x7:x8" where:
1 <= xi.length <= 4
xi is a hexadecimal string which may contain digits, lower-case English letter ('a' to 'f') and upper-case English
letters ('A' to 'F').  Leading zeros are allowed in xi.
For example, "2001:0db8:85a3:0000:0000:8a2e:0370:7334" and "2001:db8:85a3:0:0:8
A2E:0370:7334" are valid IPv6 addresses, while "2001:0db8:85a3::8A2E:037j:7334"
and "02001:0db8:85a3:0000:0000:8a2e:0370:7334" are invalid IPv6 addresses.
Example 1:
Input: queryIP = "172.16.254.1"
Output: "IPv4"

Method 1: Straight Forward
    1. Create two function to validate IPV4 and IPV6 separately.

class Solution {
public: // "172.16.254.1"
    bool isIPV6(string queryIP)
    {
        cout<<"IPv6";
        queryIP.push_back(':');
        int n = queryIP.size();
        string range = "";
        for(int i = 0; i < n; i++)
        {
            if(queryIP[i] == ':')
            {
                if(range == "" || range.size() > 4)
                    return false;

                range = "";
            }
            else
            {
                if(isdigit(queryIP[i]))
                    range += queryIP[i];
                else
                    if((queryIP[i] >= 'A' && queryIP[i] <= 'F') || (queryIP[i] >= 'a' && queryIP[i] <= 'f'))
                        range += queryIP[i];
                    else
                        return false;
            }
        }
        return true;
    }
    bool isIPV4(string queryIP)
    {
        cout<<"IPv4";
        queryIP.push_back('.');
        int n = queryIP.size();
        string range = "";
        for(int i = 0; i < n; i++)
        {
            if(queryIP[i] == '.')
            {
                if(range == "" || (range[0] == '0' && range.size() > 1) || range.size() > 3)
                    return false;

                if(stoi(range) >= 256)
                    return false;

                range = "";
            }
            else
            {
                if(isdigit(queryIP[i]))
                {
                    range += queryIP[i];

                }
                else
                    return false;
            }
        }

        return true;
    }
    string validIPAddress(string queryIP) {
        int ipV4 = 0, ipV6 = 0;
        bool status, ipV4Status = false, ipV6Status = false;

        for(int i = 0; i <queryIP.size(); i++)
        {
            if(queryIP[i] == '.')
                ipV4 += 1;
            else
                if(queryIP[i] == ':')
                  ipV6 += 1;
        }
        if(ipV4 && ipV6)
            return "Neither";
        else
        {
            if(ipV4 == 3 || ipV6 == 7)
                status = ipV4 ? true : false;
            else
                return "Neither";
        }
        if(status)
            ipV4Status = isIPV4(queryIP);
        else
            ipV6Status = isIPV6(queryIP);

        if(ipV4Status || ipV6Status)
            return ipV4Status ? "IPv4" : "IPv6";
        else
            return "Neither";
    }
};
*/