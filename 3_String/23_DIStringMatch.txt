/*
Name: DI String Match
Statement:
A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length
n where:
 s[i] == 'I' if perm[i] < perm[i + 1], and
 s[i] == 'D' if perm[i] > perm[i + 1].

Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return
any of them.
Example 1:
Input: s = "IDID"
Output: [0,4,1,3,2]
Example 2:
Input: s = "III"
Output: [0,1,2,3]

Method 1: Observation
1. Assign 0 to min and n to max
2. Scan the string, if I found insert min into answer and increment min by 1
3. Else insert max and decrement it by 1
4. By using this observation, we ensure that for I, perm[i] always less than next element and same for D

Implementation:
class Solution {
public:
    vector<int> diStringMatch(string s)
    {
        int n = s.size();
        int minElement = 0, maxElement = n;
        vector<int> answer;

        for(int i = 0; i < n; i++)
        {
            if(s[i] == 'I')
            {
                answer.push_back(minElement);
                minElement += 1;
            }
            else
            {
                answer.push_back(maxElement);
                maxElement -= 1;
            }
        }
        if(maxElement > n)
            answer.push_back(minElement);
        else
            answer.push_back(minElement);

        return answer;
    }
};
*/