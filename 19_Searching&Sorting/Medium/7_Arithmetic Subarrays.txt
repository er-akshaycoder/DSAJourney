/*
Name: Arithmetic Subarrays
Statement:
A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every
two consecutive elements is the same. More formally, a sequence is arithmetic if and only
if s[i+1] - s[i]==s[1] - s[0] for all valid i.

For example, these are arithmetic sequences:
1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequence is not arithmetic: 1, 1, 2, 5, 7

You are given an array of n integers, nums, and two arrays of m integers each,
l and r, representing the m range queries, where the iᵗʰ query is the range [l[i], r[i]]. All the arrays are 0-indexed.

Return a list of boolean elements answer, where answer[i] is true if the subarray nums[l[i]], nums[l[i]+1], ... ,
nums[r[i]] can be rearranged to form an arithmetic sequence, and false otherwise.

Example 1:
Input: nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]
Output: [true,false,true]

1. Method: Sorting
    1. Create a vector for given range and sort it
    2. Check for difference.

2. Method: Hash Table
    1. Create a vector for given range and push it into unordered map with index as key and element as value.
    2. Take overall difference, by subtracting first from last.
    3. Check if next element is present at diff + i index

*/
// Solution:
class Solution {
public:
    vector<bool> checkArithmeticSubarrays(vector<int>& nums, vector<int>& l, vector<int>& r)
    {
        vector<bool> answer;

        //sort(nums.begin(), nums.end());
        for(int i = 0; i < l.size(); i++)
        {
            vector<int> temp;
            if(abs(r[i] - l[i]) < 1)
            {
                answer.push_back(false);
                continue;
            }
            for(int j = l[i]; j <= r[i]; j++)
                temp.push_back(nums[j]);

            sort(temp.begin(), temp.end());
            int diff = abs(temp[1] - temp[0]);
            bool flag = true;
            for(int j = 2; j < temp.size(); j++)
            {
                if(abs(temp[j] - temp[j - 1]) != diff)
                {
                    flag = false;
                    break;
                }
            }
            cout<<endl;
            answer.push_back(flag);
        }

        return answer;
    }
};

