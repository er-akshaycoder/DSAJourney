/*
Name: Insert Interval
Statement:
You are given an array of non-overlapping intervals, where intervals[i] = [starti, endi] represent the start
and the end of the iᵗʰ interval and intervals is sorted in ascending order by start i. You are also given an
interval newInterval = [start, end] that represents the start and end of another interval.

Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals
still does not have any overlapping intervals (merge overlapping intervals if necessary).

Return intervals after the insertion.

Example 1:
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

Example 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].

1. Method: Naive
    1. Linearly find the position of new interval in given interval.
    2. Form the new interval from new interval and remove the over if it overlaps with its neighbour intervals.
    3. To avoid shifting, just tale new vector for answer.

*/
// Solution:
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval)
    {
        int n = intervals.size(), i = 0;
        vector<vector<int>> answer;
        bool flag = true, flag1 = true;

        while(i < n)
        {
            if(intervals[i][0] > newInterval[0] && flag)
            {
                flag1 = false;
                int j = i;
                int x = newInterval[0];
                int y = newInterval[1];

                if(i > 0)
                {
                    if(intervals[i - 1][1] >= x)
                    {
                        x = intervals[i - 1][0];
                        answer.pop_back();
                    }
                    if(intervals[i - 1][1] >= y)
                        y = intervals[i - 1][1];
                }
                while(j < n)
                {
                    if(y >= intervals[j][0])
                    {
                        if(y < intervals[j][1])
                            y = intervals[j][1];
                        flag = false;
                    }
                    else
                    {
                        j = !flag ? j - 1 : j;
                        break;
                    }
                    j += 1;
                }

                answer.push_back({x,y});
                if(flag)
                    answer.push_back(intervals[i]);
                flag = false;
                i = j;
            }
            else
                answer.push_back(intervals[i]);
        }
        if(flag1 && answer.size() > 0)
         {
            if(answer.back()[1] >= newInterval[0])
            {
                if(answer.back()[1] <= newInterval[1])
                    answer.back()[1] = newInterval[1];
            }
            else
                answer.push_back(newInterval);
         }
        if(answer.size() == 0)
            answer.push_back(newInterval);
        return answer;
    }
};

