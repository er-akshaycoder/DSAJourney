/*
Name: Sort Array by Increasing Frequency
Statement:
Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple
values have the same frequency, sort them in decreasing order.

Return the sorted array.

Example 1:
Input: nums = [1,1,2,2,2,3]
Output: [3,1,1,2,2,2]
Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.

Constraints:
1 <= nums.length <= 100
-100 <= nums[i] <= 100

1. Method: Hashtable and Sorting
    1. Store frequency of elements in hashtable and sort the hashtable by custom sorting.
    2. As -100 <= nums[i] <= 100, we can create hashtable of size 200 to store frequency.
*/
// Solution:
class Solution {
public:
    static bool compare(pair<int, int> a, pair<int, int> b)
    {
        if(a.second == b.second)
            return a.first > b.first;
        return a.second < b.second;
    }
    vector<int> frequencySort(vector<int>& nums)
    {
        vector<pair<int, int>> container(201);

        for(int element : nums)
        {
            container[element + 100].first = element;
            container[element + 100].second += 1;
        }
        sort(container.begin(), container.end(), compare);
        int j = 0;
        for(int i = 0; i < container.size(); i++)
        {
            while(j < nums.size() && container[i].second--)
                nums[j++] = container[i].first;

            if(j == nums.size())    break;
        }

        return nums;
    }
};

