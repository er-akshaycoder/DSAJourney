/*
Name: Sort Array By Parity II
Statement:
Given an array of integers nums, half of the integers in nums are odd, and the other half are even.
Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.

Return any answer array that satisfies this condition.


Example 1:
Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.

1. Method: Two pointers and Swapping
    1. Use two pointers, i for current element and j for last bad element(element at wrong position).
    2. If suitable element found for bad element, then just swap the elements and set j to next bad element.

*/
// Solution:

class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& nums)
    {
        int j = -1;

        for(int i = 0; i < nums.size(); i++)
        {
            if(j == -1 && nums[i] % 2 != i % 2)
                j = i;

            if(j != -1 && nums[i] % 2 != nums[j] % 2)
            {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;

                while(j < i && nums[j] % 2 == j % 2)
                    j++;

                j = nums[j] % 2 == j % 2 ? -1 : j;
            }
        }
        return nums;
    }
};
