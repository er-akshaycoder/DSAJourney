/*
Name: Find Minimum in Rotated Sorted Array II (Duplicates allowed)
Statement:
    Not required...

Example 1:
Input: nums = [1,3,5]
Output: 1

Example 2:
Input: nums = [2,2,2,0,1]
Output: 0

1. Method: Binary Search
    1. As array is sorted we can use binary search here.
    2. To find pivot element minimum element when array[mid] < array[mid - 1], example {2,2,2,0,1}  (Note: Pivot is 0)
    3. When array[low] is LT array[mid] then minimum will lie at right side else minimum. Here first element may be
       answered, so need to handle this condition.
*/
// Solution:

class Solution {
public:
    int findMin(vector<int>& nums)
    {
        int low = 0, high = nums.size() - 1;

        while(low <= high)
        {
            int mid = (low + high) / 2;

            if(nums[low] < nums[high])      return nums[low];
            if((mid > 0 && nums[mid - 1] > nums[mid]) || low == high)
                return nums[mid];

            if(nums[low] == nums[mid])
            {
                low += 1;
                continue;
            }
            if(nums[low] < nums[mid])
                low = mid + 1;
            else
                high = mid - 1;
        }

        return -1;
    }
};

