/*
Name: Set Matrix Zeroes
Problem Statement:
Given an m x n integer matrix, if an element is 0, set its entire row and column to 0's, and return the matrix.
You must do it in place.
Example 1:
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]

Logic:
Method 1: Two auxiliary Arrays
1. Use two auxiliary arrays to store flag value of row and column, say row[] and col[].
2. If element found 0, then marks row[j] and col[i] true.
3. Traverse matrix
4. Mark Matrix[i][j] 0 if either row[j] or col[i] holds true

Complexity:
    T = O(N^2)
    S = O(N + M)

Method 2: Efficient of method 1
1. Instead of using two extra arrays, just use first row and first column of matrix as container to hold the flags.
2. As we are reserving first row and columns for container, we need to check if first row has zero or not and no need to
   worry about first column as we are storing status of first column in first element of matrix.
3. Just scan the matrix in bottom-up manner and mark Matrix[i][j] 0 if either row[j] or col[i] holds true.
*/

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix)
    {
        if(matrix.empty())
            return;

        int m = matrix.size(), n = matrix[0].size(), firstHasRowZero = false;

        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(!matrix[i][j])
                {
                    if(i == 0)
                        firstHasRowZero = true;
                    else
                    {
                        matrix[0][j] = 0;
                        matrix[i][0] = 0;
                    }
                }
            }
        }
        cout<<firstHasRowZero;
        for(int i = m - 1; i >= 0; i--)
        {
            for(int j = n - 1; j >= 0; j--)
            {
                if(i == 0 && firstHasRowZero)
                    matrix[i][j] = 0;
                else
                {
                    if(i != 0 && (!matrix[0][j] || !matrix[i][0]))
                        matrix[i][j] = 0;
                }
            }
        }
    }
};
