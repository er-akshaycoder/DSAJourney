/*
Name: Swim in Rising Water
Statement:
You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).
The rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another
4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim
infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.
Return the least time until you can reach the bottom right square (n - 1, n - 1 ) if you start at the top left
square (0, 0).
Example 1:
Input: grid = [[0,2],[1,3]]
Output: 3
Explanation:
At time 0, you are in grid location (0, 0). You cannot go anywhere else because 4-directionally adjacent neighbors
have a higher elevation than t = 0. You cannot reach point (1, 1) until time 3.
When the depth of water is 3, we can swim anywhere inside the grid.

Note: Watch YouTube Video: https://www.youtube.com/watch?v=bwclMNcJITU

Method 1: BSF (Problem involves finding least/minimum criteria)
1. Use Priority queue as we need to consider minimum time to reach target cell i.e. n - 1, m - 1.
*/
class Solution {
public:
    struct cell{
        int x, y, time;
        cell(int a, int b, int c){
            x = a;
            y = b;
            time = c;
        }
    };
    struct Comparator{
        bool operator()(cell a, cell b){
            return !(a.time < b.time);
        }
    };
    int swimInWater(vector<vector<int>>& grid){
        int n = grid.size();
        int m = grid[0].size(), answer = 0;
        int direction[4][2] = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
        priority_queue<cell, vector<cell>, Comparator> queue;
        vector<vector<int>> visited(n, vector<int>(m, 0));

        queue.push(cell(0, 0, grid[0][0]));
        visited[0][0] = 1;

        while(!queue.empty())
        {
            cell data = queue.top();
            queue.pop();

            int a = data.x;
            int b = data.y;
            int time = data.time;

            for(int i = 0; i < 4; i++)
            {
                int r = a + direction[i][0];
                int c = b + direction[i][1];
                //cout<<a<<":"<<b<<"\n";
                if(r >= n || c >= m || r < 0 || c < 0)
                {
                    //cout<<r<<c<<"\n";
                    continue;
                }
                if(!visited[r][c])
                {
                    answer = max(time, grid[r][c]);
                    if(r == n - 1 && c == m - 1)
                        return answer;
                    queue.push(cell(r, c, answer));
                    visited[r][c] = 1;
                }
            }
        }
        return answer;
    }
};

