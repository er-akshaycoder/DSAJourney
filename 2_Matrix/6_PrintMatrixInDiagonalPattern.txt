/*
Name: Print matrix in diagonal pattern
Problem Statement: Given a matrix M of n*n size, the task is to complete the function which prints its elements in
diagonal pattern as depicted below.

Input:
N = 3
mat[][] = {{1 2 3},{4 5 6},{7 8 9}}
Output: 1 2 4 7 5 3 6 8 9

Solution:
Method 1: Efficient
1. Use two loops, outer loop will iterate for number of turns(n * 2 - 1).
2. Use flag for each turn and If flag is true then just set i = i + 1, j = 0 else i = 0, j = j + 1 for turn number <= n.
3. If flag is true then just set i = n - 1, j = j + 1, else i = i + 1, j = n - 1 for turn number > n.
4. In solution, a is for i and b is for j.
*/

class Solution{
  public:
    vector<int> matrixDiagonally(vector<vector<int>>&mat)
    {
        int n = mat.size(), a = -1, b = 0;
        vector<int> answer;
        bool flag = true;

        for(int i = 1; i < n * 2; i++)
        {
            if(i <= n)
            {
                if(flag)
                {
                    a += 1;
                    b = 0;
                }
                else
                {
                    a = 0;
                    b += 1;
                }
            }
            else
            {
                if(flag)
                {
                    a = n - 1;
                    b += 1;
                }
                else
                {
                    a += 1;
                    b = n - 1;
                }
            }

            int j = n - abs(n - i);
            answer.push_back(mat[a][b]);
            while(--j)
            {
                if(flag)
                {
                    a -= 1;
                    b += 1;
                }
                else
                {
                    a += 1;
                    b -= 1;
                }
                answer.push_back(mat[a][b]);
            }

            flag = flag ? false : true;
        }
        return answer;
    }
};