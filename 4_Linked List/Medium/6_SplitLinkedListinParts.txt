/*
Name: Split Linked List in Parts
Statement:
Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts.
The length of each part should be as equal as possible: no two parts should have a size differing by more than one.
This may lead to some parts being null. The parts should be in the order of occurrence in the input list, and parts
occurring earlier should always have a size greater than or equal to parts occurring later.
Return an array of the k parts.
Example:
Input: head = [1,2,3], k = 5
Output: [[1],[2],[3],[],[]]

Input: head = [1,2,3,4,5,6,7,8,9,10], k = 3
Output: [[1,2,3,4],[5,6,7],[8,9,10]]

Method 1: Efficient
1. Find length of list, say n.
2. find size of each block at initial point by n / k, say groupSize
3. If there is carry, increment groupSize by 1 until carry gets 0.
4. Use two while loop, outer will be executed for each group and winner will form a group.
*/
//Implementation:
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k)
    {
        vector<ListNode*> answer;
        ListNode* temp;
        int n = 0;

        for(temp = head; temp != NULL; temp = temp -> next)
            n += 1;

        int groups = n / k;
        int carry = n % k;
        temp = head;

        while(k--)
        {
            int c = carry > 0 ? 1 : 0;
            int blockSize = groups + c;
            ListNode *first = NULL, *temp1 = NULL;

            while(temp && blockSize--)
            {
                cout<<blockSize;
                if(first == NULL)
                    first = temp1 = temp;
                else
                {
                    temp1 -> next = temp;
                    temp1 = temp1 -> next;
                }
                temp = temp -> next;
            }
            if(first)
                temp1 -> next = NULL;
            answer.push_back(first);
            carry -= 1;
        }
        return answer;
    }
};

