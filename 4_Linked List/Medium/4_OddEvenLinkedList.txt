/*
Name: Odd Even Linked List
Statement:
Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even
indices, and return the reordered list. The first node is considered odd, and the second node is even, and so on.
Example:
Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]

Method 1: Two pointers
1. Create two heads, each for even and odd.
2. If current node is at odd, append it to odd list else append it to even list.
3. At last concat both list and make even last node' next NULL.
*/
// Implementation:
class Solution {
public:
    ListNode* oddEvenList(ListNode* head)
    {
        if(head == NULL || head -> next == NULL)
            return head;
        ListNode *oddHead, *evenHead, *temp1, *temp2, *temp;
        oddHead = temp1 = head;
        evenHead = temp2 = head -> next;
        temp = evenHead -> next;
        bool isOdd = true;

        while(temp)
        {
            if(isOdd)
            {
                temp1 -> next = temp;
                temp1 = temp;
            }
            else
            {
                temp2 -> next = temp;
                temp2 = temp;
            }
            temp = temp -> next;
            isOdd = isOdd ? false : true;
        }
        temp1 -> next = evenHead;
        temp2 -> next = NULL;
        return oddHead;
    }
};

