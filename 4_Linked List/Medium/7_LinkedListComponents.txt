/*
Name: Linked List Components
Statement:
You are given the head of a linked list containing unique integer values and an integer array nums that is a subset of
the linked list values. Return the number of connected components in nums where two values are connected if they appear
consecutively in the linked list.
Example:
Input: head = [0,1,2,3], nums = [0,1,3]
Output: 2
Explanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected
components.

Input: head = [0,1,2,3,4], nums = [0,3,1,4]
Output: 2
Explanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4]
are the two connected components.

Method 1: Hash Table
1. Insert all elements from array into hash table.
2. Insert dummy node at the beginning of list to handle corner cases.
3. Start scanning a list, if current node value is not present and next node's vale is present then increment component
   count as it is one of component
*/
//Implementation:
class Solution {
public:
    int numComponents(ListNode* head, vector<int>& nums)
    {
        unordered_map<int, int> hashTable;
        ListNode* temp, *dummyNode;
        int answer = 0;

        for(int i = 0; i < nums.size(); i++)
            hashTable.insert({nums[i], i});

        dummyNode = new ListNode(-1);
        dummyNode -> next = head;
        temp = dummyNode;
        while(temp -> next)
        {
            if(hashTable.find(temp -> val) == hashTable.end() && hashTable.find(temp -> next -> val) != hashTable.end())
                answer += 1;
            temp = temp -> next;
        }
        return answer;
    }
};

