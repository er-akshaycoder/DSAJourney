/*
Name: Linked List Cycle II
Statement: Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

Method 1: Two pointers
*/
//Implementation:
class Solution {
public:
    ListNode *detectCycle(ListNode *head)
    {
        ListNode *slow, *fast;
        slow = fast = head;
        bool isCycle = false;

        while(fast && fast -> next)
        {
            slow = slow -> next;
            fast = fast -> next -> next;

            if(slow == fast)
            {
                isCycle = true;
                break;
            }
        }

        if(!isCycle)
            return NULL;

        slow = head;
        while(slow != fast)
        {
            slow = slow -> next;
            fast = fast -> next;
        }

        return slow;
    }
};

