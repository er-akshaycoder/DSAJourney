/*
Name: Moves Zeros
Problem Statement:
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero
elements.
Note that you must do this in-place without making a copy of the array.
Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Method 1: Brute-Force
1. Scan the array, shift the all elements by 1 if 0 encountered and add 0 at end of array.

Method 2: Auxiliary Array
1. Store all non-zer elements to auxiliary array and maintain the count of 0's.
2. When entire array is scanned, just append 0's as per count.

Method 3: Two pointers
1. Scan the array and maintain two pointers, say left and index of current element.
2. If 0 encountered, just point left to and continue with scanning array.
3. If non-zero encountered, just swap it with left and increment left.
*/

class Solution {
public:
    void swap(int i, int j, vector<int>& array)
    {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    void moveZeroes(vector<int>& nums)
    {
        int n = nums.size(), left = -1;

        for(int i = 0; i < n; i++)
        {
            if(!nums[i] && left == -1)
                left = i;

            if(nums[i] && left != -1)
            {
                swap(left, i, nums);
                left += 1;
            }
        }
        for(int i = 0; i < n; i++)
            cout<<nums[i];
    }
};
