/*
Name: Most Profit Assigning Work
*/

class Solution {
public:
    int getMaxProfit(vector<pair<int, int>> array, int key)
    {
        int low = 0, high = array.size() - 1, mid;

        if(key > array[high].first)
            return array[high].second;

        while(low <= high)
        {
            mid = (low + high) / 2;

            if(array[mid].first == key && mid == high)
                return array[mid].second;

            if(array[mid].first < key &&  array[mid + 1].first > key)
                return array[mid].second;

            if(array[mid].first > key)
                high = mid - 1;
            else
                low = mid + 1;
        }

        return 0;
    }

    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker)
    {
        int n = difficulty.size();
        vector<pair<int, int> > array;

        for(int i = 0; i < n; i++)
            array.push_back(make_pair(difficulty[i], profit[i]));

        sort(array.begin(), array.end());

        for(int i = 1; i < n; i++)
            array[i].second = max(array[i - 1].second, array[i].second);

        int totalProfit = 0;
        for(int i = 0; i < worker.size(); i++)
            totalProfit += getMaxProfit(array, worker[i]);

        return totalProfit;
    }
};
//leetcode submit region end(Prohibit modification and deletion)

