/*
Problem Statement:
Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]

Method 1: Two Pointers
*/
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums)
    {
        int n = nums.size();
        int index = 0;
        vector<int> output;

        while(index < n && nums[index] < 0)
            index += 1;

        cout<<index;
        int left = index - 1, right = index;

        while(left >= 0 && right < n)
        {
            if(abs(nums[left]) > nums[right])
            {
                output.push_back(nums[right] * nums[right]);
                right++;
            }
            else
            {
                output.push_back(nums[left] * nums[left]);
                left--;
            }
        }
        while(left >= 0)
        {
            output.push_back(nums[left] * nums[left]);
            left--;
        }
        while(right < n)
        {
            output.push_back(nums[right] * nums[right]);
            right++;
        }
        return output;
    }
};
//leetcode submit region end(Prohibit modification and deletion)
