/*
Name: Reverse Pairs
Statement:
Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].

Example 1:
Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1

1. Method: Merge Sort
    1. Let's say, we have two list [1, 2, 3] and [1, 3]
    2. Now, we have to see if A[i] > 2 * B[j], if yes increase a count.

Note: Here, we have to take special care as 3 from A and 1 from B, never gets compared in merge sort.

*/
// Solution:
class Solution {
public:
    void splitArray(vector<int>& nums, int low, int high, int *answer)
    {
        int count = 0;

        if(low < high)
        {
            int mid = (low + high) / 2;
            splitArray(nums, low, mid, answer);
            splitArray(nums, mid + 1, high, answer);

            count = mergeList(nums, low, mid, high);
        }
        *answer += count;
    }

    int mergeList(vector<int>& nums, int low, int mid, int high)
    {
        int i = low, j = mid + 1, k = 0;
        int temp[(high - low) + 1];
        int count = 0;

        while(i <= mid && j <= high)
        {
            if((long)nums[i] > (long)nums[j] * 2)
            {
                count += (mid - i) + 1;
                j += 1;
            }
            else
                i += 1;
        }

        i = low, j = mid + 1;
        while(i <= mid && j <= high)
        {
            if(nums[i] > nums[j])
                temp[k++] = nums[j++];
            else
                temp[k++] = nums[i++];
        }

        while(i <= mid)
            temp[k++] = nums[i++];

        while(j <= high)
            temp[k++] = nums[j++];

        j = 0;
        for(int index = low; index <= high; index++)
            nums[index] = temp[j++];

        return count;
    }

    int reversePairs(vector<int>& nums)
    {
        int answer = 0;

        splitArray(nums, 0, nums.size() - 1, &answer);

        return answer;
    }
};
