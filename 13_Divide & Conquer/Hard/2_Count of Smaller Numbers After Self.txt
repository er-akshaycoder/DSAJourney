/*
Name: Count of Smaller Numbers After Self
Statement:
Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the
right of nums[i].

Example 1:
Input: nums = [5,2,6,1]
Output: [2,1,1,0]
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.

1. Method: Merge Sort
    1. From two sorted lists, we can find counts of smaller elements by comparing each element from A and B.
    2. Update count at index of element of first element.

*/
// Solution:
class Solution {
public:
    void splitArray(vector<int>& nums, int low, int high, vector<int> &indexArray, vector<int> &answer)
    {
        if(low < high)
        {
            int mid = (low + high) / 2;
            splitArray(nums, low, mid, indexArray, answer);
            splitArray(nums, mid + 1, high, indexArray, answer);

            mergeList(nums, low, mid, high, indexArray, answer);
        }
    }

    void mergeList(vector<int>& nums, int low, int mid, int high, vector<int> &indexArray, vector<int> &answer)
    {
        int i = low, j = mid + 1, k = 0;
        int temp[(high - low) + 1];
        int count = 0;

        while(i <= mid && j <= high)
        {
            if(nums[indexArray[i]] > nums[indexArray[j]])
            {
                count += 1;
                temp[k++] = indexArray[j++];
            }
            else
            {
                answer[indexArray[i]] += count;
                temp[k++] = indexArray[i++];
            }
        }

        while(i <= mid)
        {
            answer[indexArray[i]] += count;
            temp[k++] = indexArray[i++];
        }

        while(j <= high)
            temp[k++] = indexArray[j++];

        j = 0;
        for(int index = low; index <= high; index++)
            indexArray[index] = temp[j++];
    }

    vector<int> countSmaller(vector<int>& nums)
    {
        vector<int> answer(nums.size(), 0);
        vector<int> indexArray;

        for(int i = 0; i < nums.size(); i++)
            indexArray.push_back(i);

        splitArray(nums, 0, nums.size() - 1, indexArray, answer);

        return answer;
    }
};
